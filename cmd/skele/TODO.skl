pkg list # package declaration

# single comment

fol list # folder

# single comment

doc
    \ A list is a named collection of reminders (TODO items). A set of such lists constitutes the ToDoApp.
    \ A list can be added if the name is unique and not empty. A list can be removed if all of its items are 'done'

# single comment

file list_test.go           # file comment

# single comment

fsm
    \ list
states
    \ active
    \ done
    \ removed

fun                                                     # function declaration comment
    \ add list                                          # function name comment
pre                                                     # precondition comment
    \ name invalid                                      # tc{name is too short}
                                                        # tc{name starts with a number, assert bad}
    \ name not unique       \ failure to check name uniqueness
pos
    \ list added            \ failure to add list       # fsm{list->active} tc{failed to notify, assert error}
                                                        # tc{could not persist, assert correct reason, assert error}

fun
    \ remove list                                       # fsm{list=active}
pre
    \ has pending items                                 # fsm{item=done}
                                                        # tc{one item list, item pending}
                                                        # tc{two items list, one item pending}
pos
    \ list removed          \ failure to remove list    # fsm{list->removed}
                                                        # tc{one done item}
                                                        # tc{two done items}
                                                        # tc{one done item, persistence fails, assert error}

pkg item

doc
    \ An item represents a TODO reminder comprised of a text and a status.
    \ An active item can be marked as 'done' and only after it has been marked it can be removed.

file item_test.go

fsm
    \ item
states
    \ active
    \ done
    \ removed

fun
    \ add item to list                                          # fsm{list=active} we can only add items to an existing list
pre
    \ text too short
    \ text not unique in list   \ failure to check for uniqueness
pos
    \ item added                \ failure to add item           # fsm{item->active}
                                                                # as{item is found}

fun
    \ mark item as done                                         # fsm{item=active}
pos
    \ item marked as done       \ failure to mark as done       # fsm{item->done}

fun
    \ remove item                                               # fsm{item=done}
pre
    \ item is active            \ failure to check item status  # fail case can be registerd with tc{} if it is part of the implementation
pos
    \ item removed              \ failure to remove item        # fsm{item->removed}
