pkg list # package declaration

# single comment

fol list # folder

# single comment

doc
    \ A list is a named collection of reminders (TODO items). A set of such lists constitutes the ToDoApp.
    \ A list can be added if the name is unique and not empty. A list can be removed if all of its items are 'done'

# single comment

file list_test.go           # file comment

# single comment

fsm
    \ list
states
    \ new
    \ done
    \ removed

fun                         # function declaration comment
    \ add list              # fsm{list=new} fsm{item=old} function name comment
pre                         # precondition comment
    \ name invalid          # tc{name is too short, assert name invalid}
                            # tc{name starts with a number}
    \ name not unique   \ failure to check name uniqueness
pos
    \ list added        \ failure to add list       # fsm{list->new} tc{one explosion, assert one loud bang}
                                                    # tc{one bang, assert error}
                                                    # tc{assert list can not be found, assert list added}
                                                    # tc{assert list is in the thrash bin, assert success}
                                                    # tc{assert list is out of sight, assert ok}

fun
    \ remove list                                   # fsm{list=new}
pre
    \ contains pending items                        # fsm{item=done}
pos
    \ list removed      \ failure to remove list    # fsm{list->removed}

pkg item

doc
    \ An item represents a TODO reminder comprised of a text and a status.
    \ An active item can be marked as 'done' and only after it has been marked it can be removed.

file item_test.go

fsm
    \ item
states
    \ new
    \ done
    \ removed

fun
    \ add item to list                                          # fsm{list=new} we can only add items to an existent list
pre
    \ text too short
    \ text not unique in list   \ failure to check for uniqueness
pos
    \ item added                \ failure to add item           # fsm{item->new}

fun
    \ mark item as done                                         # fsm{item=new}
pos
    \ item marked as done       \ failure to mark as done       # fsm{item->done}

fun
    \ remove item                                               # fsm{item=done}
pre
    \ item is active            \ failure to check item status
pos
    \ item removed              \ failure to remove item        # fsm{item->removed}
